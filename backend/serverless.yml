# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#

service: timer


plugins:
  - serverless-iam-roles-per-function
provider:
  name: aws
  runtime: nodejs12.x
  region: 'us-east-1'
  stage: dev
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    STAGE: ${self:provider.stage}
    TableName: !Ref DynamoTable
  tags:
    service: timer 
  memorySize: 512
  iamRoleStatements:
    - Effect: Allow
      Resource: !GetAtt DynamoTable.Arn
      Action: 
        - dynamodb:PartiQLSelect
        - dynamodb:PartiQLInsert
        - dynamodb:PartiQLUpdate
  httpApi:
    payload: '2.0'
    cors: true 
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: CognitoUserPool
        audience:
          - Ref: WebUserPoolClient
package:
  # individually: true
  exclude:
    - package-lock.json
    - package.json
    - yarn.lock
    - __tests__
custom:
  region: ${opt:region, self:provider.region }
  stage: ${opt:stage, self:provider.stage}
  userPoolName: ${self:service}-${opt:stage, self:provider.stage}
  tableName: ${self:service}-${opt:stage, self:provider.stage}
  serverless-offline: 
    ignoreJWTSignature: true
  
functions:
  getTimeByDistance:
    handler: functions/app.getTimeByDistance
    events:
      - httpApi:
          method: GET
          path: /getTimeByDistance/{distance}
          authorizer: serviceAuthorizer
  getDistances:
    handler: functions/app.getDistances
    events:
      - httpApi:
          method: GET 
          path: /getDistances
          authorizer: serviceAuthorizer
  getAthletes:
    handler: functions/app.getAthletes
    events:
      - httpApi:
          method: GET 
          path: /getAthletes
          authorizer: serviceAuthorizer
  getTimes:
    handler: functions/app.getTimes
    events:
      - httpApi:
          method: GET 
          path: /getTimes/{eventId}
          authorizer: serviceAuthorizer
    environment:
      TableName: !Ref DynamoTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    iamRoleStatements:
      - Effect: Allow
        Resource: !GetAtt DynamoTable.Arn
        Action: 
          - dynamodb:PartiQLSelect
  getTimeByAthlete:
    handler: functions/app.getTimeByAthlete
    events: 
      - httpApi:
          method: GET 
          path: /getTimeByAthlete/{athleteId}
          authorizer: serviceAuthorizer
  getEvents:
    handler: functions/app.getEvents
    events:
      - httpApi:
          method: GET 
          path: /getEvents
          authorizer: serviceAuthorizer
  getEvent:
    handler: functions/app.getEvent
    events:
      - httpApi:
          method: GET 
          path: /event/{eventId}
          authorizer: serviceAuthorizer
  createEvent:
    memorySize: 512
    handler: functions/app.createEvent
    events:
      - httpApi:
          method: POST 
          path: /createEvent 
          authorizer: serviceAuthorizer
  addAthlete:
    handler:  functions/app.addAthlete
    events:
      - httpApi:  
          method: POST
          path: /athlete
          authorizer: serviceAuthorizer
  addDistance:
    handler: functions/app.addDistance
    events:
      - httpApi:
          method: POST 
          path: /distance 
          authorizer: serviceAuthorizer
  createTimer:
    handler: functions/app.createTimer
    events:
      - httpApi:
          method: POST 
          path: /createTimer 
          authorizer: serviceAuthorizer
    environment:
      TableName: !Ref DynamoTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:PartiQLInsert
          - dynamodb:PartiQLUpdate
          - dynamodb:PartiQLSelect
        Resource: !GetAtt DynamoTable.Arn
  myProfile:
    handler: functions/app.myProfile
    events:
      - httpApi:
          method: GET
          path: /profile
          authorizer: serviceAuthorizer
    environment:
      TableName: !Ref DynamoTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt DynamoTable.Arn
  ConfirmUserSignUp:
    handler: functions/confirm-user-signup.handler
    environment:
      TableName: !Ref DynamoTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt DynamoTable.Arn


# you can add CloudFormation resource templates here
resources:
  Resources:
    HttpApi:
      Type: AWS::ApiGatewayV2::Api
      DependsOn: CognitoUserPool
    UserFiles:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service.name}-${self:custom.stage}-user-files
        AccelerateConfiguration:
          AccelerationStatus: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
              AllowedOrigins: # eventually needs to be restricted to own URL
                - '*'
              AllowedHeaders:
                - '*'
    DynamoTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: key
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: key
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: ${self:custom.tableName}
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      DeletionPolicy: Retain
      Properties:
        UserPoolName: ${self:custom.userPoolName}
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireSymbols: true
            RequireNumbers: true 
        UsernameAttributes:
          - email
          - phone_number
        Schema:
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true
          - AttributeDataType: String
            Name: twitter
            Required: false 
            Mutable: true 
          - AttributeDataType: String
            Name: website
            Required: false 
            Mutable: true 
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignUpLambdaFunction.Arn
    UserPoolInvokeConfirmSignUpPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignUpLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn
    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
  Outputs:
    AwsRegion:
      Value: ${self:custom.region}
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
    WebUserPoolClient:
      Value: !Ref WebUserPoolClient
