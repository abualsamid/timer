{
  "service": {
    "service": "timer",
    "serviceObject": {
      "name": "timer"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "us-east-1",
      "stage": "dev",
      "environment": {
        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
        "STAGE": "dev",
        "TableName": {
          "Ref": "DynamoTable"
        }
      },
      "tags": {
        "service": "timer"
      },
      "memorySize": 512,
      "httpApi": {
        "payload": "2.0",
        "cors": true,
        "authorizers": {
          "serviceAuthorizer": {
            "identitySource": "$request.header.Authorization",
            "issuerUrl": {
              "Fn::Join": [
                "",
                [
                  "https://cognito-idp.",
                  "us-east-1",
                  ".amazonaws.com/",
                  {
                    "Ref": "CognitoUserPool"
                  }
                ]
              ]
            },
            "audience": [
              {
                "Ref": "WebUserPoolClient"
              }
            ]
          }
        }
      },
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetTimesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/timer-dev-getTimes"
            }
          },
          "GetEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/timer-dev-getEvents"
            }
          },
          "CreateEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/timer-dev-createEvent"
            }
          },
          "CreateTimerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/timer-dev-createTimer"
            }
          },
          "MyProfileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/timer-dev-myProfile"
            }
          },
          "ConfirmUserSignUpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/timer-dev-ConfirmUserSignUp"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "timer",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/timer-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/timer-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "timer",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetTimesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/timer/dev/1614391519434-2021-02-27T02:05:19.434Z/getTimes.zip"
              },
              "Handler": "functions/app.getTimes",
              "Runtime": "nodejs12.x",
              "FunctionName": "timer-dev-getTimes",
              "MemorySize": 512,
              "Timeout": 6,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "timer"
                }
              ],
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "TableName": {
                    "Ref": "DynamoTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "GetTimesIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTimesIamRoleLambdaExecution",
              "GetTimesLogGroup"
            ]
          },
          "GetEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/timer/dev/1614391519434-2021-02-27T02:05:19.434Z/getEvents.zip"
              },
              "Handler": "functions/app.getEvents",
              "Runtime": "nodejs12.x",
              "FunctionName": "timer-dev-getEvents",
              "MemorySize": 512,
              "Timeout": 6,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "timer"
                }
              ],
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "TableName": {
                    "Ref": "DynamoTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "GetEventsIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEventsIamRoleLambdaExecution",
              "GetEventsLogGroup"
            ]
          },
          "CreateEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/timer/dev/1614391519434-2021-02-27T02:05:19.434Z/createEvent.zip"
              },
              "Handler": "functions/app.createEvent",
              "Runtime": "nodejs12.x",
              "FunctionName": "timer-dev-createEvent",
              "MemorySize": 512,
              "Timeout": 6,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "timer"
                }
              ],
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "TableName": {
                    "Ref": "DynamoTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "CreateEventIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateEventIamRoleLambdaExecution",
              "CreateEventLogGroup"
            ]
          },
          "CreateTimerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/timer/dev/1614391519434-2021-02-27T02:05:19.434Z/createTimer.zip"
              },
              "Handler": "functions/app.createTimer",
              "Runtime": "nodejs12.x",
              "FunctionName": "timer-dev-createTimer",
              "MemorySize": 512,
              "Timeout": 6,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "timer"
                }
              ],
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "TableName": {
                    "Ref": "DynamoTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "CreateTimerIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateTimerIamRoleLambdaExecution",
              "CreateTimerLogGroup"
            ]
          },
          "MyProfileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/timer/dev/1614391519434-2021-02-27T02:05:19.434Z/myProfile.zip"
              },
              "Handler": "functions/app.myProfile",
              "Runtime": "nodejs12.x",
              "FunctionName": "timer-dev-myProfile",
              "MemorySize": 512,
              "Timeout": 6,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "timer"
                }
              ],
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "TableName": {
                    "Ref": "DynamoTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "MyProfileIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MyProfileIamRoleLambdaExecution",
              "MyProfileLogGroup"
            ]
          },
          "ConfirmUserSignUpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/timer/dev/1614391519434-2021-02-27T02:05:19.434Z/ConfirmUserSignUp.zip"
              },
              "Handler": "functions/confirm-user-signup.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "timer-dev-ConfirmUserSignUp",
              "MemorySize": 512,
              "Timeout": 6,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "timer"
                }
              ],
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "STAGE": "dev",
                  "TableName": {
                    "Ref": "DynamoTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "ConfirmUserSignUpIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConfirmUserSignUpIamRoleLambdaExecution",
              "ConfirmUserSignUpLogGroup"
            ]
          },
          "GetTimesLambdaVersionZ3vaJeGHx5tKNOQK4ol1OX1nbWF6USAyD7bTjzQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTimesLambdaFunction"
              },
              "CodeSha256": "P/ewEBSCnaPVL9YUs18j162b4sMZzRFHiUl2IYGTIjU="
            }
          },
          "GetEventsLambdaVersion97P9htlET8FuCWqm9X2KArfDiiGxBiWDMde8mkmACc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEventsLambdaFunction"
              },
              "CodeSha256": "P/ewEBSCnaPVL9YUs18j162b4sMZzRFHiUl2IYGTIjU="
            }
          },
          "CreateTimerLambdaVersionK3x1gfUOXbOKAIsNyPcuDSpDDDL0ZuWjUtQXyhTCJg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateTimerLambdaFunction"
              },
              "CodeSha256": "P/ewEBSCnaPVL9YUs18j162b4sMZzRFHiUl2IYGTIjU="
            }
          },
          "CreateEventLambdaVersion2ozcUxdH61OMTXebvVsTyKgwsKvUamAD1p8NTkAH9w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEventLambdaFunction"
              },
              "CodeSha256": "P/ewEBSCnaPVL9YUs18j162b4sMZzRFHiUl2IYGTIjU="
            }
          },
          "MyProfileLambdaVersionFBizDqacC7RlqrCyXyNp1EXrKr0PQsT8uS2uQTlRolM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MyProfileLambdaFunction"
              },
              "CodeSha256": "P/ewEBSCnaPVL9YUs18j162b4sMZzRFHiUl2IYGTIjU="
            }
          },
          "ConfirmUserSignUpLambdaVersionSM2U32Zc6NZNbZbQVhGAYVdghGOsSz7ypXJOc6SxVN4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConfirmUserSignUpLambdaFunction"
              },
              "CodeSha256": "P/ewEBSCnaPVL9YUs18j162b4sMZzRFHiUl2IYGTIjU="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-timer",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "GET",
                  "POST"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            },
            "DependsOn": [
              "CognitoUserPool"
            ]
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HttpApiAuthorizerServiceAuthorizer": {
            "Type": "AWS::ApiGatewayV2::Authorizer",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "AuthorizerType": "JWT",
              "IdentitySource": [
                "$request.header.Authorization"
              ],
              "JwtConfiguration": {
                "Audience": [
                  {
                    "$ref": "$[\"service\"][\"provider\"][\"httpApi\"][\"authorizers\"][\"serviceAuthorizer\"][\"audience\"][0]"
                  }
                ],
                "Issuer": {
                  "$ref": "$[\"service\"][\"provider\"][\"httpApi\"][\"authorizers\"][\"serviceAuthorizer\"][\"issuerUrl\"]"
                }
              },
              "Name": "serviceAuthorizer"
            }
          },
          "GetTimesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTimesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetTimes": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetTimesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetGettimesEventidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /getTimes/{eventId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetTimes"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerServiceAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationGetTimes"
          },
          "GetEventsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetEvents": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetEventsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetGetevents": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /getEvents",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetEvents"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerServiceAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationGetEvents"
          },
          "CreateEventLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateEvent": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateEventLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePostCreateevent": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /createEvent",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateEvent"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerServiceAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationCreateEvent"
          },
          "CreateTimerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateTimerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateTimer": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateTimerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePostCreatetimer": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /createTimer",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateTimer"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerServiceAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationCreateTimer"
          },
          "MyProfileLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MyProfileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationMyProfile": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"MyProfileLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetProfile": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /profile",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationMyProfile"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerServiceAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationMyProfile"
          },
          "GetTimesIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "timer",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/timer-dev-getTimes:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::GetAtt": [
                            "DynamoTable",
                            "Arn"
                          ]
                        },
                        "Action": [
                          "dynamodb:PartiQLSelect"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "timer",
                    "dev",
                    "getTimes",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "GetEventsIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "timer",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/timer-dev-getEvents:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::GetAtt": [
                            "DynamoTable",
                            "Arn"
                          ]
                        },
                        "Action": [
                          "dynamodb:PartiQLSelect"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "timer",
                    "dev",
                    "getEvents",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "CreateEventIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "timer",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/timer-dev-createEvent:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PartiQLInsert"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "DynamoTable",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "timer",
                    "dev",
                    "createEvent",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "CreateTimerIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "timer",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/timer-dev-createTimer:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PartiQLInsert",
                          "dynamodb:PartiQLUpdate",
                          "dynamodb:PartiQLSelect"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "DynamoTable",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "timer",
                    "dev",
                    "createTimer",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "MyProfileIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "timer",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/timer-dev-myProfile:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "DynamoTable",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "timer",
                    "dev",
                    "myProfile",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "ConfirmUserSignUpIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "timer",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/timer-dev-ConfirmUserSignUp:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "DynamoTable",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "timer",
                    "dev",
                    "ConfirmUserSignUp",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "UserFiles": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "timer-dev-user-files",
              "AccelerateConfiguration": {
                "AccelerationStatus": "Enabled"
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedMethods": [
                      "GET",
                      "PUT"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ]
                  }
                ]
              }
            }
          },
          "DynamoTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "timer-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "key",
                  "KeyType": "RANGE"
                }
              ],
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "key",
                  "AttributeType": "S"
                }
              ],
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Name",
                  "Value": "timer-dev"
                }
              ]
            }
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "timer-dev",
              "AutoVerifiedAttributes": [
                "email"
              ],
              "Policies": {
                "PasswordPolicy": {
                  "MinimumLength": 8,
                  "RequireSymbols": true,
                  "RequireNumbers": true
                }
              },
              "UsernameAttributes": [
                "email",
                "phone_number"
              ],
              "Schema": [
                {
                  "AttributeDataType": "String",
                  "Name": "name",
                  "Required": false,
                  "Mutable": true
                },
                {
                  "AttributeDataType": "String",
                  "Name": "twitter",
                  "Required": false,
                  "Mutable": true
                },
                {
                  "AttributeDataType": "String",
                  "Name": "website",
                  "Required": false,
                  "Mutable": true
                }
              ],
              "LambdaConfig": {
                "PostConfirmation": {
                  "Fn::GetAtt": [
                    "ConfirmUserSignUpLambdaFunction",
                    "Arn"
                  ]
                }
              }
            }
          },
          "UserPoolInvokeConfirmSignUpPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Ref": "ConfirmUserSignUpLambdaFunction"
              },
              "Principal": "cognito-idp.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "CognitoUserPool",
                  "Arn"
                ]
              }
            }
          },
          "WebUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "ClientName": "web",
              "ExplicitAuthFlows": [
                "ALLOW_USER_SRP_AUTH",
                "ALLOW_USER_PASSWORD_AUTH",
                "ALLOW_REFRESH_TOKEN_AUTH"
              ],
              "PreventUserExistenceErrors": "ENABLED"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "GetTimesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTimesLambdaVersionZ3vaJeGHx5tKNOQK4ol1OX1nbWF6USAyD7bTjzQ"
            }
          },
          "GetEventsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEventsLambdaVersion97P9htlET8FuCWqm9X2KArfDiiGxBiWDMde8mkmACc"
            }
          },
          "CreateTimerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateTimerLambdaVersionK3x1gfUOXbOKAIsNyPcuDSpDDDL0ZuWjUtQXyhTCJg"
            }
          },
          "CreateEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEventLambdaVersion2ozcUxdH61OMTXebvVsTyKgwsKvUamAD1p8NTkAH9w"
            }
          },
          "MyProfileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MyProfileLambdaVersionFBizDqacC7RlqrCyXyNp1EXrKr0PQsT8uS2uQTlRolM"
            }
          },
          "ConfirmUserSignUpLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConfirmUserSignUpLambdaVersionSM2U32Zc6NZNbZbQVhGAYVdghGOsSz7ypXJOc6SxVN4"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            }
          },
          "AwsRegion": {
            "Value": "us-east-1"
          },
          "CognitoUserPoolId": {
            "Value": {
              "Ref": "CognitoUserPool"
            }
          },
          "WebUserPoolClient": {
            "Value": {
              "Ref": "WebUserPoolClient"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "region": "us-east-1",
      "stage": "dev",
      "userPoolName": "timer-dev",
      "tableName": "timer-dev",
      "serverless-offline": {
        "ignoreJWTSignature": true
      }
    },
    "plugins": [
      "serverless-iam-roles-per-function"
    ],
    "pluginsData": {},
    "functions": {
      "getTimes": {
        "handler": "functions/app.getTimes",
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/getTimes/{eventId}",
              "authorizer": "serviceAuthorizer"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/getTimes/{eventId}"
          }
        ],
        "environment": {
          "TableName": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetTimesLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"TableName\"]"
          },
          "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
        },
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetTimesIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "name": "timer-dev-getTimes",
        "package": {
          "artifact": "/Users/ahmad/src/github.com/abualsamid/timer/backend/.serverless/getTimes.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetTimesLambdaVersionZ3vaJeGHx5tKNOQK4ol1OX1nbWF6USAyD7bTjzQ"
      },
      "getEvents": {
        "handler": "functions/app.getEvents",
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/getEvents",
              "authorizer": "serviceAuthorizer"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/getEvents"
          }
        ],
        "environment": {
          "TableName": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetEventsLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"TableName\"]"
          },
          "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
        },
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetEventsIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "name": "timer-dev-getEvents",
        "package": {
          "artifact": "/Users/ahmad/src/github.com/abualsamid/timer/backend/.serverless/getEvents.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetEventsLambdaVersion97P9htlET8FuCWqm9X2KArfDiiGxBiWDMde8mkmACc"
      },
      "createEvent": {
        "memorySize": 512,
        "handler": "functions/app.createEvent",
        "events": [
          {
            "httpApi": {
              "method": "POST",
              "path": "/createEvent",
              "authorizer": "serviceAuthorizer"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/createEvent"
          }
        ],
        "environment": {
          "TableName": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateEventLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"TableName\"]"
          },
          "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
        },
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateEventIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "name": "timer-dev-createEvent",
        "package": {
          "artifact": "/Users/ahmad/src/github.com/abualsamid/timer/backend/.serverless/createEvent.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateEventLambdaVersion2ozcUxdH61OMTXebvVsTyKgwsKvUamAD1p8NTkAH9w"
      },
      "createTimer": {
        "handler": "functions/app.createTimer",
        "events": [
          {
            "httpApi": {
              "method": "POST",
              "path": "/createTimer",
              "authorizer": "serviceAuthorizer"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/createTimer"
          }
        ],
        "environment": {
          "TableName": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateTimerLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"TableName\"]"
          },
          "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
        },
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateTimerIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "name": "timer-dev-createTimer",
        "package": {
          "artifact": "/Users/ahmad/src/github.com/abualsamid/timer/backend/.serverless/createTimer.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateTimerLambdaVersionK3x1gfUOXbOKAIsNyPcuDSpDDDL0ZuWjUtQXyhTCJg"
      },
      "myProfile": {
        "handler": "functions/app.myProfile",
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/profile",
              "authorizer": "serviceAuthorizer"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/profile"
          }
        ],
        "environment": {
          "TableName": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"MyProfileLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"TableName\"]"
          },
          "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
        },
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"MyProfileIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "name": "timer-dev-myProfile",
        "package": {
          "artifact": "/Users/ahmad/src/github.com/abualsamid/timer/backend/.serverless/myProfile.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "MyProfileLambdaVersionFBizDqacC7RlqrCyXyNp1EXrKr0PQsT8uS2uQTlRolM"
      },
      "ConfirmUserSignUp": {
        "handler": "functions/confirm-user-signup.handler",
        "environment": {
          "TableName": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConfirmUserSignUpLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"TableName\"]"
          },
          "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
        },
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConfirmUserSignUpIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "events": [],
        "name": "timer-dev-ConfirmUserSignUp",
        "package": {
          "artifact": "/Users/ahmad/src/github.com/abualsamid/timer/backend/.serverless/ConfirmUserSignUp.zip"
        },
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ConfirmUserSignUpLambdaVersionSM2U32Zc6NZNbZbQVhGAYVdghGOsSz7ypXJOc6SxVN4"
      }
    },
    "resources": {
      "Resources": {
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "DependsOn": [
            "CognitoUserPool"
          ]
        },
        "UserFiles": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "timer-dev-user-files",
            "AccelerateConfiguration": {
              "AccelerationStatus": "Enabled"
            },
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedMethods": [
                    "GET",
                    "PUT"
                  ],
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ]
                }
              ]
            }
          }
        },
        "DynamoTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "timer-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "key",
                "KeyType": "RANGE"
              }
            ],
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "key",
                "AttributeType": "S"
              }
            ],
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Name",
                "Value": "timer-dev"
              }
            ]
          }
        },
        "CognitoUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "timer-dev",
            "AutoVerifiedAttributes": [
              "email"
            ],
            "Policies": {
              "PasswordPolicy": {
                "MinimumLength": 8,
                "RequireSymbols": true,
                "RequireNumbers": true
              }
            },
            "UsernameAttributes": [
              "email",
              "phone_number"
            ],
            "Schema": [
              {
                "AttributeDataType": "String",
                "Name": "name",
                "Required": false,
                "Mutable": true
              },
              {
                "AttributeDataType": "String",
                "Name": "twitter",
                "Required": false,
                "Mutable": true
              },
              {
                "AttributeDataType": "String",
                "Name": "website",
                "Required": false,
                "Mutable": true
              }
            ],
            "LambdaConfig": {
              "PostConfirmation": {
                "Fn::GetAtt": [
                  "ConfirmUserSignUpLambdaFunction",
                  "Arn"
                ]
              }
            }
          }
        },
        "UserPoolInvokeConfirmSignUpPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Ref": "ConfirmUserSignUpLambdaFunction"
            },
            "Principal": "cognito-idp.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "CognitoUserPool",
                "Arn"
              ]
            }
          }
        },
        "WebUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "ClientName": "web",
            "ExplicitAuthFlows": [
              "ALLOW_USER_SRP_AUTH",
              "ALLOW_USER_PASSWORD_AUTH",
              "ALLOW_REFRESH_TOKEN_AUTH"
            ],
            "PreventUserExistenceErrors": "ENABLED"
          }
        }
      },
      "Outputs": {
        "AwsRegion": {
          "Value": "us-east-1"
        },
        "CognitoUserPoolId": {
          "Value": {
            "Ref": "CognitoUserPool"
          }
        },
        "WebUserPoolClient": {
          "Value": {
            "Ref": "WebUserPoolClient"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": true,
        "exclude": [
          "package-lock.json",
          "package.json",
          "yarn.lock",
          "__tests__"
        ],
        "artifactDirectoryName": "serverless/timer/dev/1614391519434-2021-02-27T02:05:19.434Z"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/timer/dev/1614391519434-2021-02-27T02:05:19.434Z",
    "artifact": ""
  }
}